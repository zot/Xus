// Generated by CoffeeScript 2.6.1
(function() {
  //###
  // Copyright (C) 2012, Bill Burdick
  // License: ZLIB license
  //###
  var FdConnection, Server, exports, log, parseAddr, path, pfs, run, setup, startProxy, startWebSocketServer, startXus, state, stateFd, usage;

  require('source-map-support').install();

  ({log} = exports = module.exports = require('./base'));

  ({startWebSocketServer} = require('./websocket'));

  ({Server} = exports = require('./peer'));

  pfs = require('./pfs'); // my tiny fs promise lib, based on q

  path = require('path');

  usage = function(args) {
    console.log(`Usage: node ${args[1]} name [-p port]`);
    return process.exit();
  };

  stateFd = null;

  state = null;

  setup = function(cont) {
    var err, stateFile, xusDir;
    try {
      xusDir = path.join(process.env.HOME, '.xus');
      stateFile = path.join(xusDir, 'state');
      return pfs.stat(xusDir).fail(function() {
        return pfs.mkdir(xusDir);
      }).then(function() {
        return pfs.open(stateFile, 'a+');
      }).then(function(fd) {
        return pfs.flock((stateFd = fd), 'ex');
      }).then(function() {
        return pfs.readFile(stateFd);
      }).then(function(s) {
        return (cont || function() {})(s);
      }).done();
    } catch (error) {
      err = error;
      return console.log(`Error: ${err.stack}`);
    }
  };

  run = function() {
    return setup(function(s) {
      var args, config, dir, httpServer, i, pattern, requirements;
      config = {
        diag: false,
        proxy: false,
        verbose: function() {},
        addr: null,
        cmd: null,
        args: []
      };
      state = (s && JSON.parse(s)) || {
        servers: {}
      };
      i = 2;
      args = process.argv;
      if (i > args.length) {
        usage(args);
      }
      config.name = args[1];
      if (state.servers[config.name]) {
        console.log(`Error: there is already a server named ${config.name}`);
        return process.exit(2);
      } else {
        requirements = [];
        while (i < args.length) {
          switch (args[i]) {
            case '-w':
              config.addr = args[++i];
              break;
            case '-e':
              requirements.push(args[++i]);
              break;
            case '-x':
              config.cmd = args[++i];
              break;
            case '-v':
              config.verbose = log;
              break;
            case '-p':
              config.proxy = true;
              break;
            case '-u':
              pattern = new RegExp(`^${args[++i]}/`);
              dir = path.resolve(args[++i]);
              //exports.dirMap.push [pattern, new RegExp("^#{dir}/"), "#{dir}/"]
              exports.addDirHandler(pattern, dir);
              break;
            case '-t':
              config.diag = true;
              console.log("Diag mode activated");
              break;
            default:
              config.args = args.slice(i);
              i = args.length;
          }
          i++;
        }
        [config.host, config.port] = parseAddr(config.addr || ':');
        httpServer = startWebSocketServer(config, function() {
          console.log(`Server ${config.name} started on port: ${httpServer.address().port}`);
          process.env.XUS_SERVER = config.name;
          process.env.XUS_PORT = httpServer.address().port;
          state.servers[config.name] = httpServer.address();
          state.servers[config.name].pid = process.pid;
          return pfs.truncate(stateFd, 0).then(function() {
            return pfs.writeFile(stateFd, JSON.stringify(state));
          }).then(function() {
            return pfs.close(stateFd);
          }).then(function() {
            if (config.cmd != null) {
              return require('child_process').spawn('/bin/sh', ['-c', config.cmd], {
                stdio: ['ignore', 1, 2]
              });
            } else {
              return 1;
            }
          }).done();
        });
        return (config.proxy ? startProxy : startXus)(config, httpServer, function(master) {
          var file, j, len, results;
          results = [];
          for (j = 0, len = requirements.length; j < len; j++) {
            file = requirements[j];
            results.push(require(file).main(master, config));
          }
          return results;
        });
      }
    });
  };

  startXus = function(config, httpServer, thenBlock) {
    var xusServer;
    exports.xusServer = xusServer = new Server(config.name);
    xusServer.diag = config.diag;
    xusServer.exit = function() {
      return process.exit();
    };
    xusServer.verbose = config.verbose;
    xusServer.verbose("Starting Xus");
    exports.connectXus(xusServer, httpServer);
    exports.addXusCometHandler(xusServer, new RegExp("^/_comet.io"));
    return thenBlock(xusServer);
  };

  startProxy = function(config, httpServer, thenBlock) {
    if (config.verbose) {
      console.log("Starting proxy");
    }
    return exports.connectProxy(config, httpServer, thenBlock);
  };

  parseAddr = function(addr) {
    var host, parts, port;
    [host, port] = parts = addr.split(':');
    if (parts.length > 2) {
      throw new Error(`Bad address format, expected [host:]port, but got ${addr}`);
    }
    return (port && [host || null, port]) || [null, host || null];
  };

  exports.FdConnection = FdConnection = (function() {
    class FdConnection extends exports.Connection {
      constructor(input, output) {
        super(null, null);
        this.input = input;
        this.output = output;
        this.q = [];
        this.writing = false;
      }

      setMaster(master1) {
        this.master = master1;
        if (this.master) {
          this.master.addConnection(this);
          return this.read(new Buffer(65536));
        }
      }

      basicClose() {
        fs.close(this.input, function(err) {
          return console.log(`Error closing connection: ${err.stack}`);
        });
        return fs.close(this.output, function(err) {
          return console.log(`Error closing connection: ${err.stack}`);
        });
      }

      read(buf) {
        return fs.read(this.input, buf, 0, buf.length, null, (err, bytesRead) => {
          if (err) {
            this.verbose(`${d(this)} disconnect`);
            return this.master.disconnect(this);
          } else {
            this.verbose(`${d(this)} data '${data}'`);
            this.newData(buf.toString(null, 0, bytesRead));
            return this.read(buf);
          }
        });
      }

      write(str) {
        if (str.length) {
          this.q.push(str);
          if (!this.writing) {
            this.writing = true;
            return this.writeNext();
          }
        }
      }

      writeNext() {
        var buf;
        buf = new Buffer(this.q[0]);
        splice(this.q, 0, 1);
        return writeBuffer(buf);
      }

      writeBuffer(buf) {
        return fs.write(this.output, buf, 0, buf.length, null, (err, written) => {
          if (err) {
            this.verbose(`${d(this)} disconnect`);
            return this.master.disconnect(this);
          } else if (written < buf.length) {
            return this.writeBuffer(buf.slice(written));
          } else if (this.q.length) {
            return this.writeNext();
          } else {
            return this.writing = false;
          }
        });
      }

    };

    FdConnection.prototype.connected = true;

    return FdConnection;

  }).call(this);

  exports.run = run;

  exports.setup = setup;

}).call(this);

//# sourceMappingURL=main.js.map
